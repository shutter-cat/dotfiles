" Display Settings
" ================
set encoding=utf8                          " utf8 everywhere
set t_Co=256                               " Enable 256 colors
syntax on                                  " Syntax highlighting on
syntax enable                              " Yep, really
if &term =~ '256color' | set t_ut= | endif " Disable Background Color Erase (tmux)

" Plugins
" =======
call plug#begin('~/.vim/plugged')
Plug 'Raimondi/delimitMate'               " Autocomplete brackets
Plug 'airblade/vim-gitgutter'             " Show git status in the sidebar
Plug 'rbgrouleff/bclose.vim'              " Dependency for ranger.vim
Plug 'bling/vim-airline'                  " Status bar
Plug 'chriskempson/base16-vim'            " Color theme (note: I think alacritty is good enough for us, heh
Plug 'fidian/hexmode'                     " Hex mode editor
Plug 'francoiscabrol/ranger.vim'          " Replace netrw with ranger
Plug 'junegunn/fzf.vim'                   " Fuzzy finder
Plug 'junegunn/vim-easy-align'            " Align markdown tables
Plug 'kristijanhusak/vim-carbon-now-sh'   " Open in carbon.sh
Plug 'rust-lang/rust.vim'                 " Rust helpers
Plug 'sheerun/vim-polyglot'               " More language syntax highlighting
Plug 'terryma/vim-multiple-cursors'       " Multi cursor support
Plug 'tpope/vim-abolish'                  " Enable finding / replacing word permutations
Plug 'tpope/vim-commentary'               " Add comments in blocks
Plug 'tpope/vim-repeat'                   " Repeat the last set of commands, rather than single command
Plug 'tpope/vim-surround'                 " Enable inserting brackets around words
Plug 'vim-airline/vim-airline-themes'     " Airline themes
Plug 'w0rp/ale'                           " Asynchronous linting engine
Plug 'autozimu/LanguageClient-neovim', {
\ 'branch': 'next',
\ 'do': 'bash install.sh',
\ }
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
" Plug 'Shougo/neosnippet.vim'
" Plug 'Shougo/neosnippet-snippets'
call plug#end()

" General Config
" ==============
let mapleader=' '               " Set <Leader> to spacebar
set nonumber                    " Line numbers are good
set backspace=indent,eol,start  " Allow backspace in insert mode
set history=1000                " Store lots of :cmdline history
set showcmd                     " Show incomplete cmds down the bottom
set showmode                    " Show current mode down the bottom
set gcr=a:blinkon0              " Disable cursor blink
set autoread                    " Reload files changed outside vim
set laststatus=2                " Always show status line
set hidden                      " Buffers can exist in the background
set splitright                  " Opens vertical split right of current window
set splitbelow                  " Opens horizontal split below current window
set shell=/bin/bash             " Run commands in bash
au FocusGained * :checktime     " Automatically reload files when changed

" Clipboard
" =========
set clipboard^=unnamed,unnamedplus
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <C-r><C-o>+

" Colors
" ======
let base16colorspace=256
highlight Search ctermfg=black ctermbg=yellow
highlight Folded cterm=NONE ctermfg=gray ctermbg=237
highlight ColorColumn ctermbg=237
highlight Visual ctermfg=blue ctermbg=white

" Change the color of the editor after 80 chars, except for the quickfix panel.
let &colorcolumn=join(range(81,999),",")
au FileType qf setlocal nonumber colorcolumn=

" Folds
" =====
set foldlevel=0
set foldmethod=syntax
set foldtext=CustomFoldText('.')
set fillchars=fold:.

function! CustomFoldText(string)
  let fs = v:foldstart

  while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
  endwhile

  if fs > v:foldend
    let line = getline(v:foldstart)
  else
    let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
  endif

  let pat  = matchstr(&l:cms, '^\V\.\{-}\ze%s\m')
  let line = substitute(line, '^\s*'.pat.'\s*', '', '')
  let pat  = '\%('. pat. '\)\?\s*'. split(&l:fmr, ',')[0]. '\s*\d\+'
  let line = substitute(line, pat, '', '')

  let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)

  let foldSize = 1 + v:foldend - v:foldstart
  let foldSizeStr = " " . foldSize . " "
  let foldLevelStr = '    '
  let lineCount = line("$")
  if has("float")
    try
      let foldPercentage = printf("[%.0f", (foldSize*1.0)/lineCount*100) . "%] "
    catch /^Vim\%((\a\+)\)\=:E806/	" E806: Using Float as String
      let foldPercentage = printf("[of %d] ", lineCount)
    endtry
  endif
  if exists("*strwdith")
      let expansionString = repeat(a:string, w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))
        else
      let expansionString = repeat(a:string, w - strlen(substitute(foldSizeStr.line.foldLevelStr.foldPercentage, '.', 'x', 'g')))
  endif
  return line . ' ' . expansionString . foldSizeStr . foldPercentage . foldLevelStr
endf

" Mouse
" ======
set ttyfast " Send more characters for redraws
set mouse=a " Enable mouse use in all modes

" Search Settings
" ===============
set incsearch        " Find the next match as we type the search
set hlsearch         " Hilight searches by default
set viminfo='100,f1  " Save up to 100 marks, enable capital marks

" Turn Off Swap Files
" ===================
set noswapfile                " Disable .swp files
set nobackup                  " Disable ~ backup files
set nowritebackup             " No really
set backupdir=/var/tmp,/tmp   " But if you do, write it here
set directory=/var/tmp,/tmp   " Or here

" Indentation and Display
" =======================
filetype plugin on
filetype indent on
set autoindent       " We've automated our indentation, and now there's fewer jobs
set smartindent      " Indents didn't drop out of high school. High five
set smarttab         " Tabs with a PhD
set shiftwidth=2     " Tabs are now 2 width long
set softtabstop=2
set tabstop=2
set expandtab
set nowrap           " Don't wrap lines
set linebreak        " Wrap lines at convenient points
set formatoptions+=j " Auto collapse comments
set textwidth=80     " Show gutter at 80 chars

" Custom Key Bindings
" ===================
nmap <C-k> g*Ncw
vmap <C-k> <ESC><C-k>
vnoremap <Leader>c :CarbonNowSh<CR>

" Hex Mode
" ========
let g:hexmode_patterns = '*.bin,*.exe,*.dat,*.o'
nnoremap <C-H> :Hexmode<CR>

" Markdown
" ======================
au FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>
au FileType markdown set textwidth=80
au FileType markdown let &colorcolumn=join(range(81,999),",")
au BufRead,BufNewFile *.md set filetype=markdown
augroup markdown
  au!
  autocmd Syntax markdown setlocal wm=2
  autocmd Syntax markdown setlocal spell
augroup END

" Auto Commands
" =============
autocmd! BufWritePost vimrc so ~/.vimrc"  " Automatically reload vimrc when it's saved

" Completion
" ==========
let g:deoplete#enable_at_startup = 1
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Scrolling
" =========
" Start scrolling when we're getting close to margins
set scrolloff=10
set sidescrolloff=15
set sidescroll=1

" Airline Plugin
" ==============
let g:airline_powerline_fonts = 0
let g:airline_theme = 'base16_eighties'
if !exists('g:airline_symbols') | let g:airline_symbols = {} | endif
let g:airline_section_b = ''
let g:airline_section_z = airline#section#create(['%l:%c %L'])
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#ale#enabled = 1

" Git Gutter Plugin
" =================
set signcolumn=yes
let g:gitgutter_eager = 0
let g:gitgutter_override_sign_column_highlight = 0
highlight Comment ctermbg=black
highlight SignColumn ctermbg=black

" Ctrlp Plugin
" ============
" map <Leader>e :CtrlPBuffer<CR>
" let g:ctrlp_working_path_mode = 'ra'
" let g:ctrlp_switch_buffer = 'et'
" let g:ctrlp_use_caching = 0

" if executable('rg')
"   let g:ctrlp_user_command = 'rg --files %s'
" elseif executable('ag')
"   let g:ctrlp_user_command = 'ag %s --files-with-matches -g "" --ignore "\.git$\|\.hg$\|\.svn$"'
" endif

" FZF Plugin
" ==========
map <Leader>e :Buffers<CR>
nnoremap <C-p> :Files<Cr>
nnoremap <C-f> :Rg<Cr>

" Ale Plugin
" ==========
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
let g:ale_lint_on_text_changed = 'never' " Only lint when text is saved.
let g:ale_completion_enabled = 1         " Enable completion where enabled.
let g:ale_set_balloons = 1               " Highlight information on the fly.
let g:ale_set_highlights = 1             " Highlight code in file.
let g:ale_set_quickfix = 1               " Use the quicklist buffer.
let g:ale_set_loclist = 0                " Don't use loclist.
let g:ale_fix_on_save = 1                " Auto fix js.
let g:ale_open_list = 1                  " Auto open quicklist buffer.
let g:ale_list_window_size = 5           " Shrink the suggestion window
let g:ale_completion_max_numbers = 20    " Max suggestions.
let g:airline#extensions#ale#enabled = 1
let g:ale_fixers = { 'javascript': [] }
let g:ale_linters = { 'javascript': ['standard'], 'asm': [], }
highlight ALEStyleWarning ctermfg=Black
highlight ALEStyleWarning ctermbg=Yellow
highlight ALEWarning ctermfg=Black
highlight ALEWarning ctermbg=Yellow
highlight ALEStyleError ctermfg=Black
highlight ALEStyleError ctermbg=Red
highlight ALEError ctermfg=Black
highlight ALEError ctermbg=Red

" Close quickfix window if it's the last one open.
aug QFClose
  au!
  au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix"|q|endif
aug END

" Language Server
" ================
" Required for operations modifying multiple buffers like rename.
set hidden

let g:LanguageClient_serverCommands = {
\ 'rust': ['rustup', 'run', 'nightly', 'rls'],
\ 'javascript': ['javascript-typescript-stdio']
\ }

nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
noremap <silent> R :call LanguageClient_textDocument_rename()<CR>
let g:LanguageClient_loggingLevel = 'DEBUG'

" Rust
" ====
au BufRead,BufNewFile *.rs set filetype=rust
let g:rust_fold = 2
let g:rustfmt_autosave = 1
let g:rust_recommended_style = 1
augroup filetype_rust
  autocmd!
  autocmd BufReadPost *.rs setlocal filetype=rust
  let &colorcolumn=join(range(101,999),",")
  au FileType qf setlocal nonumber colorcolumn=
  set textwidth=100     " Show gutter at 100 chars
augroup END

" Utilities
" =========
" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! %!sudo tee > /dev/null %
" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv
vnoremap <Leader>m #_*\(\u\)\(\u*\)#\1\L\2#g<CR>

" Ranger
" ======
let g:ranger_replace_netrw = 1

" No swap suck
" ============
let g:NoSwapSuck_Enabled = get(g:, 'NoSwapSuck_Enabled', 1)
let g:NoSwapSuck_CloseSwapfileOnWrite = get(g:, 'NoSwapSuck_CloseSwapfileOnWrite', 1)
let g:NoSwapSuck_CheckSwapfileOnLoad = get(g:, 'NoSwapSuck_CheckSwapfileOnLoad', 1)
let g:NoSwapSuck_CreateSwapfileOnInsert = get(g:, 'NoSwapSuck_CreateSwapfileOnInsert', 1)
let g:NoSwapSuck_Debug = get(g:, 'NoSwapSuck_Debug', 0)
if !g:NoSwapSuck_Enabled
  finish
endif
if g:NoSwapSuck_Debug && g:NoSwapSuck_CheckSwapfileOnLoad
  set noswapfile
endif
augroup NoSwapSuck
  autocmd!
  autocmd BufReadPre *  if g:NoSwapSuck_CheckSwapfileOnLoad | call s:SetSwapfileToCheck() | endif
  autocmd BufReadPost * call s:ConsiderClosingSwapfile()
  autocmd InsertEnter * if g:NoSwapSuck_CreateSwapfileOnInsert | call s:ConsiderCreatingSwapfile(1) | endif
  autocmd InsertLeave * call s:ConsiderCreatingSwapfile()
  autocmd CursorHold * call s:ConsiderCreatingSwapfile()
  autocmd BufWritePost * if g:NoSwapSuck_CloseSwapfileOnWrite | call s:ConsiderClosingSwapfile() | endif
  autocmd WinLeave * call s:ConsiderClosingSwapfile()
  autocmd WinEnter * call s:ConsiderCreatingSwapfile()
  autocmd BufLeave * call s:ConsiderClosingSwapfile()
  autocmd BufEnter * call s:ConsiderCreatingSwapfile()
augroup END

function! s:ConsiderClosingSwapfile()
  if !g:NoSwapSuck_Enabled
    return
  endif
  if &swapfile && !&modified
    if g:NoSwapSuck_Debug | echo "Setting NO swapfile" | endif
    setlocal noswapfile
  endif
endfunction

function! s:ConsiderCreatingSwapfile(...)
  if !g:NoSwapSuck_Enabled
    return
  endif
  let about_to_be_modified = a:0 ? a:1 : 0
  if !&swapfile && ( &modified || about_to_be_modified ) && !s:SwapfileDisableForCurrentBuffer()
    if g:NoSwapSuck_Debug | echo "Setting swapfile" | endif
    setlocal swapfile
  endif
endfunction

function! s:SetSwapfileToCheck()
  if !g:NoSwapSuck_Enabled
    return
  endif
  set swapfile
endfunction

function! s:SwapfileDisableForCurrentBuffer()
  return get(b:, 'NoSwapSuck_NoSwapfile', 0)
endfunction
