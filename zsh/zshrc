# init options
autoload -Uz compinit promptinit
compinit
promptinit

# load .profile
[[ -e ~/.profile ]] && emulate sh -c 'source ~/.profile'

# globals
export LC_ALL="en_US.UTF-8"
export TERM=screen-256color
export PATH="$PATH:$HOME/.cargo/bin"
export PROJECTS=~/Code
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000

# set options
setopt SHARE_HISTORY
setopt hist_ignore_space
setopt histignoredups
set -o vi

# source extensions
source /usr/share/zsh/plugins/history-search-multi-word/history-search-multi-word.plugin.zsh
source /usr/share/zsh/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh
source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh
fpath=("$HOME/.zsh/functions" $fpath)
autoload -U $HOME/.zsh/functions/*(:t)

# key bindings
bindkey '^R' history-incremental-search-backward  # Fix history search in tmux
bindkey -M viins '^?' backward-delete-char        # Fix backspace delete
bindkey -M viins '^H' backward-delete-char        # Fix backspace delete

# autocomplete
setopt COMPLETE_ALIASES
zstyle ':completion:*' menu select
zstyle ':completion::complete:*' gain-privileges 1
zstyle ':completion:*' rehash true

# tmux status
tmux_status() {
  if [ "$TMUX" = "" ]; then
    echo ""
  else
    session_name="$(tmux list-sessions | grep attached | awk '{print $1}' | sed 's/://g' )"
    windows="$(tmux list-windows -t "$session_name" -F '#{window_index}')"
    window_number="$(tmux list-windows -t "$session_name"| grep active | awk '{print $1}' | sed 's/://')"

    val="$session_name:"
    while read -r n; do
      if [ $n = $window_number ]; then
        val+="$n"
      fi
    done <<< "$windows"
    echo "[$val]"
  fi
}

# git status
setopt prompt_subst
autoload -Uz vcs_info
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' actionformats '%F{6}%F{2}%b%F{3}|%F{1}%a%F{5}%f '
zstyle ':vcs_info:*' formats '%F{5}%F{2}%b%F{5}%f '
zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'
zstyle ':vcs_info:*' enable git hg

vcs_info_wrapper() {
  vcs_info
  if [ -n "$vcs_info_msg_0_" ]; then
    echo "%{$fg[grey]%}${vcs_info_msg_0_}%{$reset_color%}$del"
  fi
}

# prompt
autoload -Uz add-zsh-hook
prompt_command() {
  exit_status="$?"

  if [ "$exit_status" -eq 0 ]; then local clr_status="%F{cyan}"
  else local clr_status="%F{red}"; fi

  if [ $USER = root ]; then local sign="#"
  else local sign="❯"; fi

  if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then local host="%n@%m "
  else local host=""; fi

  if [ "$exit_status" = "0" ]; then local exit_code=""
  else local exit_code="$exit_status "; fi

  TMUX_STATUS="$(tmux_status)"
  GIT_STATUS=$'$(vcs_info_wrapper)'
  TIME='%F{gray}[%*]'
  DIR="%F{blue}%~%F{white} "

  NEWLINE=$'\n'
  RPROMPT="$TMUX_STATUS"
  PROMPT="$NEWLINE$DIR$host$GIT_STATUS$NEWLINE$TIME $clr_status$exit_code$sign%F{white} "
}
add-zsh-hook precmd prompt_command

# aliases
alias git='hub'
alias g='git'
alias gh='hub browse'
alias ls='ls --color=auto --group-directories-first'
alias ll='ls -alph --color=auto --group-directories-first'
alias s='git status --short'
alias c='cargo'
